# Automatically generated by Pynguin.
import unittest
import tracewrapper as module0

class test(unittest.TestCase):
    def test_isstatic(self):
        inst1 = module0.tracewrapper()
        assert inst1 is not None
        inst2 = module0.tracewrapper()
        assert inst2 is not None
        inst1.add_function_exclusion("test")
        assert inst2.function_excluded("test") is True, "Tracer Object should be static (functionexclusions)"
        inst1.add(show_trace1)
        assert inst2.functions[0] is inst1.functions[0], "Tracer Object should be static (functions)"
        inst1.add_module_exclusion("test")
        assert inst2.module_excluded("test"), "Tracer Object should be static (moduleexclusions)"
        inst1.add_event_filter(show_trace1,"call")
        assert inst2.event_filter(show_trace1,"call"), "Tracer Object should be static (filters)"
    def test_types_tracer_add(self):
        tracer = module0.tracewrapper()
        testval=0
        exp=False
        try:
            tracer.add(testval)
        except AssertionError:
            exp=True
        assert exp, "Expected type exeception tracer.add expects a function type"
        exp=False
        try:
            tracer.add(show_trace1)
        except AssertionError:
            exp=True
        assert not exp, "Function type produced an exception on tracer.add()"

    def test_types_tracer_add_function_excusion(self):
        tracer = module0.tracewrapper()
        testval=0
        exp=False
        try:
            tracer.add_function_exclusion(testval)
        except AssertionError:
            exp=True
        assert exp, "Expected type str on tracer.add_function_exclusion()"
        exp=False
        try:
            tracer.add_function_exclusion("test str")
        except AssertionError:
            exp=True
        assert not exp, "String type produced an exception on tracer.add_function_exclusion()"

    def test_types_tracer_delete_function_excusion(self):
        tracer = module0.tracewrapper()
        testval=0
        exp=False
        try:
            tracer.delete_function_exclusion(testval)
        except AssertionError:
            exp=True
        assert exp, "Expected type str on tracer.delete_function_exclusion()"
        exp=False
        tracer.add_function_exclusion("test")
        try:
            tracer.delete_function_exclusion("test")
        except AssertionError:
            exp=True
        assert not exp, "String type produced an exception on tracer.delete_function_exclusion()"

    def test_types_tracer_function_excluded(self):
        tracer = module0.tracewrapper()
        testval=0
        exp=False
        tracer.add_function_exclusion("test")
        try:
            assert not tracer.function_excluded("test")
            assert tracer.function_excluded("not a test")
        except AssertionError:
            exp=True
        assert exp, "function_excluded() not working"

    def test_types_tracer_add_module_excusion(self):
        tracer = module0.tracewrapper()
        testval=0
        exp=False
        try:
            tracer.add_module_exclusion(testval)
        except AssertionError:
            exp=True
        assert exp, "Expected type str on tracer.add_module_exclusion()"
        exp=False
        try:
            tracer.add_module_exclusion("test str")
        except AssertionError:
            exp=True
        assert not exp, "String type produced an exception on tracer.add_module_exclusion()"

    def test_types_tracer_delete_module_excusion(self):
        tracer = module0.tracewrapper()
        testval=0
        exp=False
        try:
            tracer.delete_module_exclusion(testval)
        except AssertionError:
            exp=True
        assert exp, "Expected type str on tracer.delete_module_exclusion()"
        exp=False
        tracer.add_module_exclusion("test")
        try:
            tracer.delete_module_exclusion("test")
        except AssertionError:
            exp=True
        assert not exp, "String type produced an exception on tracer.delete_module_exclusion()"


    def test_types_tracer_module_excluded(self):
        tracer = module0.tracewrapper()
        testval=0
        exp=False
        tracer.add_module_exclusion("test")
        try:
            assert not tracer.module_excluded("test")
            assert tracer.module_excluded("not a test")
        except AssertionError:
            exp=True
        assert exp, "module_excluded() not working"



#dependencies
def show_trace1(frame, event, arg):
      code = frame.f_code
      offset = frame.f_lasti


      print(f"Trace1 | {code.co_name}\n", end=' ')
      return show_trace1
